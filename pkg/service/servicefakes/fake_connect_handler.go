// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/livekit/livekit-server/pkg/service"
	"github.com/livekit/protocol/auth"
	"github.com/livekit/protocol/logger"
	"github.com/livekit/protocol/rpc"
)

type FakeConnectHandler struct {
	HandleConnectStub        func(context.Context, logger.Logger, *auth.ClaimGrants, *rpc.RelaySignalv2ConnectRequest) (*rpc.RelaySignalv2ConnectResponse, error)
	handleConnectMutex       sync.RWMutex
	handleConnectArgsForCall []struct {
		arg1 context.Context
		arg2 logger.Logger
		arg3 *auth.ClaimGrants
		arg4 *rpc.RelaySignalv2ConnectRequest
	}
	handleConnectReturns struct {
		result1 *rpc.RelaySignalv2ConnectResponse
		result2 error
	}
	handleConnectReturnsOnCall map[int]struct {
		result1 *rpc.RelaySignalv2ConnectResponse
		result2 error
	}
	LoggerStub        func(context.Context) logger.Logger
	loggerMutex       sync.RWMutex
	loggerArgsForCall []struct {
		arg1 context.Context
	}
	loggerReturns struct {
		result1 logger.Logger
	}
	loggerReturnsOnCall map[int]struct {
		result1 logger.Logger
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnectHandler) HandleConnect(arg1 context.Context, arg2 logger.Logger, arg3 *auth.ClaimGrants, arg4 *rpc.RelaySignalv2ConnectRequest) (*rpc.RelaySignalv2ConnectResponse, error) {
	fake.handleConnectMutex.Lock()
	ret, specificReturn := fake.handleConnectReturnsOnCall[len(fake.handleConnectArgsForCall)]
	fake.handleConnectArgsForCall = append(fake.handleConnectArgsForCall, struct {
		arg1 context.Context
		arg2 logger.Logger
		arg3 *auth.ClaimGrants
		arg4 *rpc.RelaySignalv2ConnectRequest
	}{arg1, arg2, arg3, arg4})
	stub := fake.HandleConnectStub
	fakeReturns := fake.handleConnectReturns
	fake.recordInvocation("HandleConnect", []interface{}{arg1, arg2, arg3, arg4})
	fake.handleConnectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConnectHandler) HandleConnectCallCount() int {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	return len(fake.handleConnectArgsForCall)
}

func (fake *FakeConnectHandler) HandleConnectCalls(stub func(context.Context, logger.Logger, *auth.ClaimGrants, *rpc.RelaySignalv2ConnectRequest) (*rpc.RelaySignalv2ConnectResponse, error)) {
	fake.handleConnectMutex.Lock()
	defer fake.handleConnectMutex.Unlock()
	fake.HandleConnectStub = stub
}

func (fake *FakeConnectHandler) HandleConnectArgsForCall(i int) (context.Context, logger.Logger, *auth.ClaimGrants, *rpc.RelaySignalv2ConnectRequest) {
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	argsForCall := fake.handleConnectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeConnectHandler) HandleConnectReturns(result1 *rpc.RelaySignalv2ConnectResponse, result2 error) {
	fake.handleConnectMutex.Lock()
	defer fake.handleConnectMutex.Unlock()
	fake.HandleConnectStub = nil
	fake.handleConnectReturns = struct {
		result1 *rpc.RelaySignalv2ConnectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectHandler) HandleConnectReturnsOnCall(i int, result1 *rpc.RelaySignalv2ConnectResponse, result2 error) {
	fake.handleConnectMutex.Lock()
	defer fake.handleConnectMutex.Unlock()
	fake.HandleConnectStub = nil
	if fake.handleConnectReturnsOnCall == nil {
		fake.handleConnectReturnsOnCall = make(map[int]struct {
			result1 *rpc.RelaySignalv2ConnectResponse
			result2 error
		})
	}
	fake.handleConnectReturnsOnCall[i] = struct {
		result1 *rpc.RelaySignalv2ConnectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeConnectHandler) Logger(arg1 context.Context) logger.Logger {
	fake.loggerMutex.Lock()
	ret, specificReturn := fake.loggerReturnsOnCall[len(fake.loggerArgsForCall)]
	fake.loggerArgsForCall = append(fake.loggerArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.LoggerStub
	fakeReturns := fake.loggerReturns
	fake.recordInvocation("Logger", []interface{}{arg1})
	fake.loggerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnectHandler) LoggerCallCount() int {
	fake.loggerMutex.RLock()
	defer fake.loggerMutex.RUnlock()
	return len(fake.loggerArgsForCall)
}

func (fake *FakeConnectHandler) LoggerCalls(stub func(context.Context) logger.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = stub
}

func (fake *FakeConnectHandler) LoggerArgsForCall(i int) context.Context {
	fake.loggerMutex.RLock()
	defer fake.loggerMutex.RUnlock()
	argsForCall := fake.loggerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnectHandler) LoggerReturns(result1 logger.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = nil
	fake.loggerReturns = struct {
		result1 logger.Logger
	}{result1}
}

func (fake *FakeConnectHandler) LoggerReturnsOnCall(i int, result1 logger.Logger) {
	fake.loggerMutex.Lock()
	defer fake.loggerMutex.Unlock()
	fake.LoggerStub = nil
	if fake.loggerReturnsOnCall == nil {
		fake.loggerReturnsOnCall = make(map[int]struct {
			result1 logger.Logger
		})
	}
	fake.loggerReturnsOnCall[i] = struct {
		result1 logger.Logger
	}{result1}
}

func (fake *FakeConnectHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleConnectMutex.RLock()
	defer fake.handleConnectMutex.RUnlock()
	fake.loggerMutex.RLock()
	defer fake.loggerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnectHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.ConnectHandler = new(FakeConnectHandler)
